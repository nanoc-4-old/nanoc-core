# ----- TO BE ENABLED ----

# Offense count: 3
Style/EmptyElse:
  Enabled: false



# ----- TWEAKED -----

Style/FileName:
  Exclude:
    - lib/nanoc-core.rb

Style/GlobalVars:
  Exclude:
    - test/**/*.rb

# Can possibly be fixed, but low prio
Style/ClassAndModuleChildren:
  Exclude:
    - test/**/*.rb



# ----- DISABLED (hard) -----

# nanoc relies on eval in several cases (code snippets and some helpers).
Eval:
  Enabled: false

# nanoc suppresses exceptions for valid reasons in a few cases.
HandleExceptions:
  Enabled: false



# ----- DISABLED (code quality) -----
#
# There are tools for checking code quality (file/method/line/class length, complexity, …) and these shouldn’t be part of the regular Rubocop style checks.

LineLength:
  Enabled: false

MethodLength:
  Enabled: false

ClassLength:
  Enabled: false

PerceivedComplexity:
  Enabled: false

CyclomaticComplexity:
  Enabled: false

Metrics/ParameterLists:
  Enabled: false

Metrics/AbcSize:
  Enabled: false



# ----- DISABLED (opinionated) -----

# Hash parameters should not have braces, but this cop is unable to distinguish
# between has parameters and methods that take a hash as a param.
BracesAroundHashParameters:
  Enabled: false

# Parameters are indented one soft tab instead, which reduces indentation.
AlignParameters:
  Enabled: false

# We should embrace UTF-8, not avoid it. Since the Encoding cop is enabled,
# there’s no point in enforcing ASCII comments.
AsciiComments:
  Enabled: false

# It does not make sense to enforce everything to have documentation.
Documentation:
  Enabled: false

# if/unless at the end of the line makes it too easy to oversee.
IfUnlessModifier:
  Enabled: false

# This causes the hashes to be ridiculously indented.
IndentHash:
  Enabled: false

# Personal preference is to have decent constructors for exceptions rather than
# just a class and a message.
RaiseArgs:
  Enabled: false

# Personal preference is to use `raise` to signal exceptions (normal control
# flow should not use exceptions anyway).
SignalException:
  Enabled: false

# Some methods that appear to be accessors (return a single value or set a
# single value) should still not be considered to be accessors. This is a purely
# semantic difference.
TrivialAccessors:
  Enabled: false

# Trailing commas improve diffs. One could argue that diff algorithms should be
# able to handle this, but they cannot, so this is disabled.
TrailingComma:
  Enabled: false

# This does not always semantically make sense.
GuardClause:
  Enabled: false
